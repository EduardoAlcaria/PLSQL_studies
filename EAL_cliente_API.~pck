create or replace package EAL_CLIENTE_API is
   procedure new___(
      cliente in EAL_Cliente_Tab%rowtype
   );

   procedure modify___(
      cliente in EAL_Cliente_Tab%rowtype
   );

   procedure remove___(
      cod_cliente in EAL_Cliente_Tab.Cod_Cliente%type
   );

   function get___(
      cod_cliente in EAL_Cliente_Tab.Cod_Cliente%type
   )
   return EAL_Cliente_Tab%rowtype;
   
    function get_estado___(
      cod_cliente in EAL_Cliente_Tab.Cod_Cliente%type
   )
   return number;
   
    function get_pais___(
      cod_cliente in EAL_Cliente_Tab.Cod_Cliente%type
   )
   return number;
   
    function get_cidade___(
      cod_cliente in EAL_Cliente_Tab.Cod_Cliente%type
   )
   return number;
   
    function get_nome___(
      cod_cliente in EAL_Cliente_Tab.Cod_Cliente%type
   )
   return varchar2;
   
   
    function get_cpf___(
      cod_cliente in EAL_Cliente_Tab.Cod_Cliente%type
   )
   return varchar2;
   
   
    function get_rg___(
      cod_cliente in EAL_Cliente_Tab.Cod_Cliente%type
   )
   return varchar2;
   
    function get_ativo___(
      cod_cliente in EAL_Cliente_Tab.Cod_Cliente%type
   )
   return varchar2;
   
   
    function valida_cpf(
      cpf in EAL_Cliente_Tab.cpf%type
   )
   return varchar2;
   
end EAL_CLIENTE_API;
/
create or replace package body EAL_CLIENTE_API is

   procedure new___(
      cliente in EAL_CLIENTE_TAB%rowtype
   ) is
   begin
     if  cliente.cod_cliente is not null and 
         cliente.cod_cidade is not null and
         cliente.cod_estado is not null and 
         cliente.cod_pais is not null and
         cliente.cliente_name is not null and 
         cliente.cpf is not null and 
         cliente.rg is not null and 
         cliente.ativo is not null then
         cliente
         _cpf(cliente.cpf);
        insert into EAL_CLIENTE_TAB
        values (
           cliente.cod_cliente,
           cliente.cod_cidade,
           cliente.cod_estado,
           cliente.cod_pais,
           cliente.cliente_name,
           cliente.cpf,
           cliente.rg,
           cliente.ativo
        );
        
     end if;
   end new___;

   procedure modify___(
      cliente in EAL_CLIENTE_TAB%rowtype
   ) is
   begin
      if  cliente.cod_cliente is not null and 
         cliente.cod_cidade is not null and
         cliente.cod_estado is not null and 
         cliente.cod_pais is not null and
         cliente.cliente_name is not null and 
         cliente.cpf is not null and 
         cliente.rg is not null and 
         cliente.ativo is not null then
          update EAL_CLIENTE_TAB
          set
             cod_cidade = cliente.cod_cidade,
             cod_estado = cliente.cod_estado,
             cod_pais = cliente.cod_pais,
             cliente_name = cliente.cliente_name,
             cpf = cliente.cpf,
             rg = cliente.rg,
             ativo = cliente.ativo
          where cod_cliente = cliente.cod_cliente;
      end if;    
   end modify___;

   procedure remove___(
      cod_cliente in EAL_CLIENTE_TAB.cod_cliente%type
   ) is
   begin
      delete from EAL_CLIENTE_TAB
      where  cod_cliente = EAL_CLIENTE_TAB.cod_cliente;
   end remove___;

   function get___(
       cod_cliente in EAL_CLIENTE_TAB.cod_cliente%type
   ) return EAL_CLIENTE_TAB%rowtype
   is
      ret EAL_CLIENTE_TAB%rowtype;
   begin
      select * into ret from EAL_CLIENTE_TAB
      where  cod_cliente = EAL_CLIENTE_TAB.cod_cliente;
      return ret;
   end get___;
   
   
    function get_estado___(
       cod_cliente in EAL_CLIENTE_TAB.cod_cliente%type
   ) return number
   is
      ret number;
   begin
      select cod_estado into ret from EAL_CLIENTE_TAB
      where  cod_cliente = EAL_CLIENTE_TAB.cod_cliente;
      return ret;
   end get_estado___;
   
   function get_pais___(
       cod_cliente in EAL_CLIENTE_TAB.cod_cliente%type
   ) return number
   is
      ret number;
   begin
      select cod_pais into ret from EAL_CLIENTE_TAB
      where  cod_cliente = EAL_CLIENTE_TAB.cod_cliente;
      return ret;
   end get_pais___;
   
   function get_cidade___(
       cod_cliente in EAL_CLIENTE_TAB.cod_cliente%type
   ) return number
   is
      ret number;
   begin
      select cod_cidade into ret from EAL_CLIENTE_TAB
      where  cod_cliente = EAL_CLIENTE_TAB.cod_cliente;
      return ret;
   end get_cidade___;
   
   function get_nome___(
       cod_cliente in EAL_CLIENTE_TAB.cod_cliente%type
   ) return varchar2
   is
      ret varchar2(255);
   begin
      select cliente_name into ret from EAL_CLIENTE_TAB
      where  cod_cliente = EAL_CLIENTE_TAB.cod_cliente;
      return ret;
   end get_nome___;
   
   function get_cpf___(
       cod_cliente in EAL_CLIENTE_TAB.cod_cliente%type
   ) return varchar2
   is
      ret varchar2(255);
   begin
      select cpf into ret from EAL_CLIENTE_TAB
      where  cod_cliente = EAL_CLIENTE_TAB.cod_cliente;
      return ret;
   end get_cpf___;
   
   function get_rg___(
       cod_cliente in EAL_CLIENTE_TAB.cod_cliente%type
   ) return varchar2
   is
      ret varchar2(255);
   begin
      select rg into ret from EAL_CLIENTE_TAB
      where  cod_cliente = EAL_CLIENTE_TAB.cod_cliente;
      return ret;
   end get_rg___;
   
   function get_ativo___(
       cod_cliente in EAL_CLIENTE_TAB.cod_cliente%type
   ) return varchar2
   is
      ret varchar2(255);
   begin
      select ativo into ret from EAL_CLIENTE_TAB
      where  cod_cliente = EAL_CLIENTE_TAB.cod_cliente;
      return ret;
   end get_ativo___;
   
   
   
   
   function valida_cpf(
     cpf in EAL_CLIENTE_TAB.cpf%type
   ) return varchar2
   is
     ret varchar2(255);
     sum1 number(32) := 0;
     sum2 number(32) := 0;
     repet varchar2(32767);
     counter varchar2(10) := 10;
     
     e_invalid_cpf exception;
     
     digit1 varchar2(1);
     digit2 varchar2(1);
     
     digits varchar2(255);
   begin
     for i in 1 .. length(cpf) loop
       if (substr(cpf, i, 1)) between '0' and '9' then
         repet := repet || (length(cpf) - length(replace(cpf, (substr(cpf, i, 1)), ''))) / length(cpf);
         
         ret := ret || substr(cpf, i, 1);
     
       end if;
     end loop;
     
    
  
     
     if length(ret) = 11 and repet is not null then
        for i in 1 .. length(ret) loop
            
            if counter = 1 then
              exit;
            end if;  
            sum1 := sum1 + substr(ret, i, 1) * counter;
     
            counter := counter - 1;
        end loop;
        
       if mod(sum1, 11) < 2 then
         digit1 := 0;
       else
         digit1 := 11 - mod(sum1,11);  
       end if; 
       
     else
       raise e_invalid_cpf;
     end if;
 
   counter := 11;
   for i in 1 .. 10 loop
     if counter = 1 then
        exit;
     end if;   
     sum2 := sum2 + substr(ret, i, 1) * counter;
     
     dbms_output.put_line('digit ' || substr(ret, i, 1) || ' sum2 e ' ||  sum2 || ' times ' || counter);
     counter := counter - 1;
     end loop;
     
     if mod(sum2, 11) < 2 then
         digit2 := 0;
       else
         digit2 := 11 - mod(sum2,11);  
     end if;
     
   
   
 
   
   digits := digit1 || digit2;
   if cpf like '%'||digits then
      return ret;
      
   else
     
     raise e_invalid_cpf;    
   end if;
   exception
     when e_invalid_cpf then
       ret := 'ERROR: cpf is invalid';
       return ret;
   
   
   end valida_cpf;
 
   
   
   

end EAL_CLIENTE_API;
/
